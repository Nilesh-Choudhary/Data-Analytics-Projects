select* from cust_address;



delete t1 from transaction t1
inner join transaction t2 
where t1.transaction_id > t2.transaction_id
and t1.product_id =
 t2.product_id
and t1.customer_id = t2.customer_id
;


set sql_safe_updates=0;

SET GLOBAL wait_timeout = 28800;   -- 8 hours
SET GLOBAL net_read_timeout = 300; -- 5 minutes



DELETE t1 
FROM transaction t1
INNER JOIN transaction t2 
  ON t1.product_id = t2.product_id
  AND t1.customer_id = t2.customer_id
  AND t1.transaction_id > t2.transaction_id;

SELECT * 
FROM transaction
GROUP BY product_id, customer_id, transaction_date, online_order, order_status, brand, product_line, product_class, product_size, list_price, standard_cost, product_first_sold_date
HAVING COUNT(*) > 1;
 
 select distinct count(*)
 from transaction;
 
-- View transactions with missing brand or product details
 
select * 
from transaction
where brand is null or product_line is null or product_class is null;

  
-- a. Count the number of transactions per customer:

select customer_id, count(*) as transaction_count
from transaction
group by customer_id
order by transaction_count desc;


-- b. Identify customers with the highest spend:

select customer_id, sum(list_price) as total_spend
from transaction
group by customer_id
order by total_spend desc
limit 20;


-- a. Count the number of transactions per product:

select product_id, count(*) as transaction_count
from transaction
group by product_id
order by transaction_count desc;


-- b. Total sales per brand:

select brand, sum(list_price) as total_sales
from transaction
where brand is not null
group by brand
order by total_sales desc;


-- c. List top-selling product lines:

select product_line, sum(list_price) as total_sales
from transaction
where product_line is not null
group by product_line
order by total_sales desc;


-- a. Total revenue generated from all transactions:

select sum(list_price) as total_revenue
from transaction;


-- b. Total revenue generated by year:

select year(str_to_date(transaction_date, '%m/%d/%Y')) as year, sum(list_price) as total_revenue
from transaction
group by year
order by year;


-- c. Average transaction value:

select avg(list_price) as avg_transaction_value
from transaction;


-- a. Count of online orders vs. offline orders:

select 
case 
when online_order = 1 then 'Online' 
  else 'Offline' 
  end as order_type, 
  count(*) as total_orders
from transaction
group by order_type;


-- b. Total sales by order type (online vs offline):

select 
case 
when online_order = 1 then 'Online' 
 else 'Offline' 
  end as order_type, 
sum(list_price) as total_sales
from transaction
group by order_type;


-- a. Count transactions by order status:

select order_status, count(*) as transaction_count
from transaction
group by order_status;


-- b. Total sales by order status:

select order_status, sum(list_price) as total_sales
from transaction
group by order_status
order by total_sales desc;


-- a. Calculate profit margin for each transaction:

select transaction_id, list_price, 
  cast(replace(standard_cost, '$', '') as decimal(10, 2)) as standard_cost,
  (list_price - cast(replace(standard_cost, '$', '') as decimal(10, 2))) as profit_margin
from transaction
where standard_cost is not null;


-- b. Average profit margin by product line:

select product_line, 
       avg(list_price - cast(replace(standard_cost, '$', '') as decimal(10, 2))) as avg_profit_margin
from transaction
where product_line is not null
group by product_line;


-- c. Total profit by brand:

select brand, 
	sum(list_price - cast(replace(standard_cost, '$', '') as decimal(10, 2))) as total_profit
from transaction
where brand is not null
group by brand
order by total_profit desc;


-- a. Count of products sold after their first sold date:

select product_id, 
       sum(list_price) as total_sales
from transaction
where product_first_sold_date is not null
group by product_id
order by total_sales desc;


-- a. Count of transactions with missing online order details:

select count(*) as missing_online_order_count
from transaction
where online_order is null;


-- b. Count of transactions with missing product line or brand information:

select count(*) as missing_product_info
from transaction
where product_line is null or brand is null;


-- a. Calculate Recency (Days since last purchase for each customer):

select customer_id, 
 datediff(curdate(), max(str_to_date(transaction_date, '%m/%d/%Y'))) as recency
from transaction
group by customer_id
order by recency;

-- b. Calculate Frequency (Number of transactions per customer):

select customer_id, 
  count(transaction_id) as frequency
from transaction
group by customer_id
order by frequency desc;


-- c. Calculate Monetary (Total amount spent by each customer):

select customer_id, 
  sum(list_price) as monetary
from transaction
group by customer_id
order by monetary desc;


-- d. Combine RFM into one query:

select customer_id, 
   datediff(curdate(), max(str_to_date(transaction_date, '%m/%d/%Y'))) as recency,
   count(transaction_id) as frequency,
   sum(list_price) as monetary
from transaction
group by customer_id
order by monetary desc;


-- a. Estimate customer lifetime value (simple model using total spend):

select customer_id, 
sum(list_price) as total_spend, 
	count(transaction_id) / (datediff(curdate(),
min(str_to_date(transaction_date, '%m/%d/%Y'))) / 365) as yearly_frequency, 
(sum(list_price) / count(transaction_id)) as avg_order_value, 
(sum(list_price) / (count(transaction_id) / (datediff(curdate(), 
    min(str_to_date(transaction_date, '%m/%d/%Y'))) / 365))) as customer_lifetime_value
from transaction
group by customer_id
order by customer_lifetime_value desc
limit 10;


-- a. Best-selling product in each product line:

select product_line, product_id, sum(list_price) as total_sales
from transaction
where product_line is not null
group by product_line, product_id
order by total_sales desc;


-- b. Products with highest profit margins:

select product_id, 
       (sum(list_price) - sum(cast(replace(standard_cost, '$', '') as decimal(10, 2)))) as total_profit
from transaction
where standard_cost is not null
group by product_id
order by total_profit desc
limit 10;


-- c. Average time between first sold date and transaction:

select product_id, 
       avg(datediff(str_to_date(transaction_date, '%m/%d/%Y'), from_days(product_first_sold_date))) as avg_days_to_sell
from transaction
where product_first_sold_date is not null
group by product_id
order by avg_days_to_sell;

-- a. Identify sales growth rate by year:

select year(str_to_date(transaction_date, '%m/%d/%Y')) as year, 
       sum(list_price) as total_sales,
       (sum(list_price) - lag(sum(list_price)) over (order by year(str_to_date(transaction_date, '%m/%d/%Y')))) / 
        LAG(SUM(list_price)) OVER (ORDER BY YEAR(STR_TO_DATE(transaction_date, '%m/%d/%Y'))) * 100 as growth_rate
from transaction
group by year
order by year;


-- b. Sales trend over time (month-over-month growth):

select year(str_to_date(transaction_date, '%m/%d/%Y')) as year, 
       month(str_to_date(transaction_date, '%m/%d/%Y')) as month, 
       sum(list_price) as total_sales,
       (sum(list_price) - lag(sum(list_price)) over (order by year(str_to_date(transaction_date, '%m/%d/%Y')), 
						  month(str_to_date(transaction_date, '%m/%d/%Y')))) /
        lag(sum(list_price)) over (order by year(str_to_date(transaction_date, '%m/%d/%Y')), 
		month(str_to_date(transaction_date, '%m/%d/%Y'))) * 100 as month_over_month_growth
from transaction
group by year, month
order by year, month;


-- a. Customers who haven't purchased in the last year:

select customer_id, 
       max(str_to_date(transaction_date, '%m/%d/%Y')) as last_purchase_date
from transaction
group by customer_id
having last_purchase_date < date_sub(curdate(), interval 1 year);


-- a. Products frequently bought together:

select t1.product_id as product_1, 
       t2.product_id as product_2, 
       count(*) as freq_bought_together
from transaction t1
join transaction t2 on t1.customer_id = t2.customer_id 
    and t1.transaction_id <> t2.transaction_id
where t1.transaction_date = t2.transaction_date
group by product_1, product_2
order by freq_bought_together desc
limit 10;


-- a. Identify repeat customers (more than one transaction):

select customer_id, count(transaction_id) as num_transactions
from transaction
group by customer_id
having num_transactions > 1
order by num_transactions desc;


-- b. Customer retention rate (yearly):

select year(str_to_date(transaction_date, '%m/%d/%Y')) as year,
	count(distinct customer_id) as unique_customers,
	count(distinct customer_id) / (lag(count(distinct customer_id)) over (order by year(str_to_date(transaction_date, '%m/%d/%Y')))) * 100 as retention_rate
from transaction
group by year
order by year;















  
